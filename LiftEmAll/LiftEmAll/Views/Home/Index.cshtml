@model LiftEmAll.Models.DriverRequest

@{
	ViewBag.Title = "Home Page";
}
<style>
	/* Always set the map height explicitly to define the size of the div
	   * element that contains the map. */
	#map {
		height: 100%;
	}
	/* Optional: Makes the sample page fill the window. */
	html, body {
		height: 100%;
		margin: 0;
		padding: 0;
	}

	.controls {
		margin-top: 10px;
		border: 1px solid transparent;
		border-radius: 2px 0 0 2px;
		box-sizing: border-box;
		-moz-box-sizing: border-box;
		height: 32px;
		outline: none;
		box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
	}

	#pac-input {
		background-color: #fff;
		font-family: Roboto;
		font-size: 15px;
		font-weight: 300;
		margin-left: 12px;
		padding: 0 11px 0 13px;
		text-overflow: ellipsis;
		width: 30%;
		max-width: 100%;
	}

		#pac-input:focus {
			border-color: #4d90fe;
		}

	.pac-container {
		font-family: Roboto;
	}

	#type-selector {
		color: #fff;
		background-color: #4d90fe;
		padding: 5px 11px 0px 11px;
	}

		#type-selector label {
			font-family: Roboto;
			font-size: 13px;
			font-weight: 300;
		}

	#target {
		width: 345px;
	}

	#panel {
		position: fixed;
		background: #444;
		color: #fff;
		height: 100%;
		width: 300px;
		right: -300px;
		transition: right 0.4s ease-in-out;
		-o-transition: right 0.4s ease-in-out;
		-ms-transition: right 0.4s ease-in-out;
		-moz-transition: right 0.4s ease-in-out;
		-webkit-transition: right 0.4s ease-in-out;
		z-index: 10000;
		opacity: 0.7;
	}

		#panel h2, #panel p {
			padding: 25px;
		}

	#panelCaller {
		position: absolute;
		top: 40%;
		right: 300px;
		padding: 30px 10px;
		background: #444;
		/*border-radius: 50px 0 0 50px;*/
	}

	#panel:hover {
		cursor: pointer;
	}
</style>

<form action="@Url.Action("SendRequest")" method="POST" novalidate="novalidate">
	<div id="panel">
		<div id="panelCaller" onclick="showRightPanel(); return false;">HEY!</div>

		<h2>Request A Driver</h2>

		<div class="col-md-12">
			<label class="control-label">Name: </label>
		</div>
		<div class="col-md-12">
			@Html.TextBox("Name", Model.Name, new { @class = "form-control" })
		</div>

		<div class="col-md-12">
			<label class="control-label">Email: </label>
		</div>
		<div class="col-md-12">
			@Html.TextBox("Email", Model.Email, new { @class = "form-control" })
		</div>

		<div class="col-md-12">
			<label class="control-label">Phone: </label>
		</div>
		<div class="col-md-12">
			@Html.TextBox("Phone", Model.Phone, new { @class = "form-control" })
		</div>

		<div class="col-md-12">
			<label class="control-label">Pick-up location: </label>
		</div>
		<div class="col-md-12">
			@Html.TextBox("PickUpLocation", Model.PickUpLocation, new { @class = "form-control" })
		</div>

		<div class="col-md-12">
			<label class="control-label">Destination location: </label>
		</div>
		<div class="col-md-12">
			@Html.TextBox("DestinationLocation", Model.DestinationLocation, new { @class = "form-control" })
		</div>

		<div class="col-md-12" style="margin-top: 15px">
			<button class="btn btn-success" type="submit">Send</button>
		</div>
	</div>
</form>
<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="map"></div>
@section scripts {
	<script>
		function showRightPanel() {
			$("#panel").css("right") == "-300px" ?
			$("#panel").css("right", "0px") :
			$("#panel").css("right", "-300px")
			;
		}
		$(function () {
			$('.slider-arrow').click(function () {
				if ($(this).hasClass('show')) {
					$(".slider-arrow, .panel").animate({
						left: "+=290"
					}, 700, function () {
						// Animation complete.
					});
					$(this).html('&laquo;').removeClass('show').addClass('hide');
				}
				else {
					$(".slider-arrow, .panel").animate({
						left: "-=290"
					}, 700, function () {
						// Animation complete.
					});
					$(this).html('&raquo;').removeClass('hide').addClass('show');
				}
			});

		});

		function initAutocomplete() {
			var map = new google.maps.Map(document.getElementById('map'), {
				center: { lat: -33.8688, lng: 151.2195 },
				zoom: 13,
				mapTypeId: 'roadmap'
			});

			// Create the search box and link it to the UI element.
			var input = document.getElementById('pac-input');
			var searchBox = new google.maps.places.SearchBox(input);
			map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

			// Bias the SearchBox results towards current map's viewport.
			map.addListener('bounds_changed', function () {
				searchBox.setBounds(map.getBounds());
			});

			var markers = [];
			// Listen for the event fired when the user selects a prediction and retrieve
			// more details for that place.
			searchBox.addListener('places_changed', function () {
				var places = searchBox.getPlaces();

				if (places.length == 0) {
					return;
				}

				// Clear out the old markers.
				markers.forEach(function (marker) {
					marker.setMap(null);
				});
				markers = [];

				// For each place, get the icon, name and location.
				var bounds = new google.maps.LatLngBounds();
				places.forEach(function (place) {
					if (!place.geometry) {
						console.log("Returned place contains no geometry");
						return;
					}
					var icon = {
						url: place.icon,
						size: new google.maps.Size(71, 71),
						origin: new google.maps.Point(0, 0),
						anchor: new google.maps.Point(17, 34),
						scaledSize: new google.maps.Size(25, 25)
					};

					// Create a marker for each place.
					markers.push(new google.maps.Marker({
						map: map,
						icon: icon,
						title: place.name,
						position: place.geometry.location
					}));

					if (place.geometry.viewport) {
						// Only geocodes have viewport.
						bounds.union(place.geometry.viewport);
					} else {
						bounds.extend(place.geometry.location);
					}
				});
				map.fitBounds(bounds);
			});
		}
	</script>
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCzKDA8fLjC4_Mc7CxMXejSeURcU3QPb74&libraries=places&callback=initAutocomplete"
			async defer></script>
}
